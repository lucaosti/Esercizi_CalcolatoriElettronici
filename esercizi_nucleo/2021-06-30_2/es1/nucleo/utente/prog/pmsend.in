#include <all.h>
#include <vm.h>
#pragma GCC diagnostic ignored "-Wuninitialized"
#pragma GCC diagnostic ignored "-Wmaybe-uninitialized"

#define dbg(s, ...) flog(LOG_DEBUG, "TEST %d: " s, test_num, ## __VA_ARGS__)
#define msg(s, ...) printf("TEST %d PROC %d: " s "\n", test_num, getpid(), ## __VA_ARGS__)
#define err(s, ...) msg("ERRORE: " s, ## __VA_ARGS__)
#define die(s, ...) do { err(s, ## __VA_ARGS__); goto error; } while (0)

#define new_proc(tn, pn)\
	t##tn##p##pn = activate_p(t##tn##p##pn##b, test_num, prio--, LIV_UTENTE);

natl end_test; // sync

#define end_subtest() do {\
	(void)&&error;\
error:\
	terminate_p();\
} while (0)

#define end_test() do {\
	(void)&&error;\
error:\
	sem_signal(end_test);\
	terminate_p();\
} while (0)

#define TCNT(n)	natl t##n##m0; natl t##n##n0;
#define testok(n) do {\
	sem_wait(t##n##m0);\
	t##n##n0++;\
	sem_signal(t##n##m0);\
} while (0)

int test_num;

const char *b2s(bool b)
{
	return b ? "true" : "false";
}

#define checkmsend(p__, e__) do\
{\
	bool b__ = masend(p__);\
	if (b__ != (e__)) {\
		err("masend(%d) ha restituito %s invece di %s",\
			(p__), b2s(b__), b2s(e__));\
		goto error;\
	}\
} while (0)

char dummy;

const vaddr ini_msg_p = norm(I_UTN_P * dim_region(MAX_LIV - 1)); // utente privata
const vaddr fin_msg_p = ini_msg_p + dim_region(0) * MSG_AREA_PAGES;

///**********************************************************************
// *             test 00: errori vari                                   *
// *                                                                    *
// * Il primo processo chiama masend() senza essere owner di una msg     *
// * area. Il secondo tenta di inviare la msg area a se stesso. Il      *
// * terzo tenta di inviarla a dummy (id = 0). Ci aspettiamo che tutti  *
// * e tre vengano abortiti.                                            *
// **********************************************************************/

natl t00p0;
natl t00p1;
natl t00p2;

void t00p0b(natq test_num)
{
	masend(t00p1);
	err("masend senza chiamare macreate non ha causato abort");
	terminate_p();
}

void t00p1b(natq test_num)
{
	macreate();
	masend(getpid());
	err("masend a se stesso non ha causato abort\n");
	terminate_p();
}

void t00p2b(natq test_num)
{
	macreate();
	masend(0);
	err("masend a processo di sistema non ha causato abort\n");
	terminate_p();
}

// **********************************************************************
// *             test 01: funzionalità minima                           *
// *                                                                    *
// * Il secondo processo crea una msg area, ci scrive un valore e la    *
// * invia al primo processo. Ci aspettiamo che il primo processo legga *
// * il valore scritto dal secondo.                                     *
// **********************************************************************

natl t01p0;
natl t01p1;
natl t01s0;
natq* t01w0;
TCNT(01);

void t01p0b(natq test_num)
{
	sem_wait(t01s0);
	if (*t01w0 == 10)
		testok(01);
	end_test();
}

void t01p1b(natq test_num)
{
	t01w0 = static_cast<natq*>(macreate());
	*t01w0 = 10;
	checkmsend(t01p0, true);
	sem_signal(t01s0);
	testok(01);
	end_test();
}

// **********************************************************************
// *             test 02: accesso dopo masend                            *
// *                                                                    *
// * come nel test 01, ma questa volta il processo che invia prova a    *
// * scrivere nella msg area dopo averla inviata. Ci aspettiamo che     *
// * l'accesso causi un page fault.                                     *
// **********************************************************************

natl t02p0;
natl t02p1;
natl t02s0;
natl t02w0;
TCNT(02);

void t02p0b(natq test_num)
{
	natq* m = static_cast<natq*>(macreate());
	sem_wait(t02s0);
	checkmsend(t02p1, true);
	*m = 20;
	t02w0 = 1;
	err("accesso alla message area dopo masend non ha causato fault");
	end_test();
}

void t02p1b(natq test_num)
{
	sem_signal(t02s0);
	if (!t02w0)
		testok(02);
	end_test();
}

// **********************************************************************
// *             test 03: accesso prima e dopo masend                    *
// *                                                                    *
// * Come nel test 02, ma questa volta il processo che invia accede     *
// * alla msg area anche subito prima di averla inviata (cosa cambia?)  *
// * Anche in questo caso ci aspettiamo che l'accesso eseguito dopo     *
// * l'invio della msg area causi un page fault.                        *
// **********************************************************************

natl t03p0;
natl t03p1;
natl t03s0;
natl t03w0;
TCNT(03);

void t03p0b(natq test_num)
{
	natq* m = static_cast<natq*>(macreate());
	sem_wait(t03s0);
	*m = 30;
	checkmsend(t03p1, true);
	*m = 35;
	t03w0 = 1;
	err("accesso alla message area dopo masend non ha causato fault");
	end_test();
}

void t03p1b(natq test_num)
{
	sem_signal(t03s0);
	if (!t03w0)
		testok(03);
	end_test();
}

// **********************************************************************
// *             test 04: palleggio                                     *
// *                                                                    *
// * I due processi si ripallano la stessa msg area un po' di volte,    *
// * ogni volta scrivendovi un numero progressivo. Ci aspettiamo che    *
// * ogni volta ciascuno riesca a leggere il valore scritto dall'altro. *
// **********************************************************************

natl t04p0;
natl t04p1;
natl t04s0;
natl t04s1;
long* t04w0;
TCNT(04);

void t04p0b(natq test_num)
{
	t04w0 = static_cast<long*>(macreate());
	for (int i = 0; i < 5; i++) {
		*t04w0 = 40 + i;
		checkmsend(t04p1, true);
		sem_signal(t04s0);
		sem_wait(t04s1);
		if (*t04w0 != 45 + i)
			err("atteso %d, ricevuto %d", 45 + i, *t04w0);
	}
	testok(04);
	end_test();
}

void t04p1b(natq test_num)
{
	for (int i = 0; i < 5; i++) {
		sem_wait(t04s0);
		if (*t04w0 != 40 + i)
			err("atteso %d, ricevuto %d", 40 + i, *t04w0);
		*t04w0 = 45 + i;
		checkmsend(t04p0, true);
		sem_signal(t04s1);
	}
	testok(04);
	end_test();
}

// **********************************************************************
// *             test 05: destinatario occupato o non esistente         *
// *                                                                    *
// * Il secondo processo prova a inviare la sua msg area prima ad un    *
// * processo che è già owner di un'altra e poi ad un processo non      *
// * esistente. Ci aspettiamo che in entrambi i casi la masend()         *
// * restituisca false e lasci inalterata la msg area.                  *
// **********************************************************************

natl t05p0;
natl t05p1;
natl t05s0;
long* t05w0;
TCNT(05);

void t05p0b(natq test_num)
{
	macreate();
	sem_wait(t05s0);
	testok(05);
	end_test();
}

void t05p1b(natq test_num)
{
	natq* m = static_cast<natq*>(macreate());
	checkmsend(t05p0, false);
	*m = 50;
	sem_signal(t05s0);
	checkmsend(t05p0, false);
	*m = 55;
	testok(05);
	end_test();
}

// **********************************************************************
// *             test 06: accesso su più pagine                         *
// *                                                                    *
// * Come nel testo 01, ma questa volta viene scritto e poi letto un    *
// * valore da ciascuna delle pagine della msg area.                    *
// **********************************************************************

natl t06p0;
natl t06p1;
natl t06s0;
long* t06w0;
TCNT(06);

void t06p0b(natq test_num)
{
	sem_wait(t06s0);
	for (int i = 0; i < MSG_AREA_PAGES; i++) {
		long j = t06w0[DIM_PAGINA/sizeof(long) * i];
		if (j != 600 + i) {
			err("atteso %d, ricevuto %d", 600 + i, j);
		}
	}
	testok(06);
	end_test();
}

void t06p1b(natq test_num)
{
	t06w0 = static_cast<long*>(macreate());
	for (int i = 0; i < MSG_AREA_PAGES; i++)
		t06w0[DIM_PAGINA/sizeof(long) * i] = 600 + i;
	checkmsend(t06p0, true);
	sem_signal(t06s0);
	testok(06);
	end_test();
}


/**********************************************************************/


process mainp body main_body(0), 900, LIV_UTENTE;

process_body main_body(natq id)
{
	natl prio = 600;
	natl membefore = getmeminfo().num_frame_liberi;

	end_test = sem_ini(0);

	test_num = 0;
	dbg(">>>INIZIO<<<: errori vari");
	new_proc(00, 0);
	delay(10);
	new_proc(00, 1);
	delay(10);
	new_proc(00, 2);
	delay(10);
	dbg("=== FINE ===");

	test_num = 1;
	dbg(">>>INIZIO<<<: funzionalita' minima");
	t01s0 = sem_ini(0);
	new_proc(01, 0);
	new_proc(01, 1);
	sem_wait(end_test);
	sem_wait(end_test);
	if (t01n0 == 2) msg("OK");
	dbg("=== FINE ===");

	test_num = 2;
	dbg(">>>INIZIO<<<: accesso dopo masend");
	t02s0 = sem_ini(0);
	new_proc(02, 0);
	new_proc(02, 1);
	sem_wait(end_test);
	if (t02n0 == 1) msg("OK");
	dbg("=== FINE ===");

	test_num = 3;
	dbg(">>>INIZIO<<<: accesso prima e dopo masend");
	t03s0 = sem_ini(0);
	new_proc(03, 0);
	new_proc(03, 1);
	sem_wait(end_test);
	if (t03n0 == 1) msg("OK");
	dbg("=== FINE ===");

	test_num = 4;
	dbg(">>>INIZIO<<<: palleggio");
	t04s0 = sem_ini(0);
	t04s1 = sem_ini(0);
	new_proc(04, 0);
	new_proc(04, 1);
	sem_wait(end_test);
	sem_wait(end_test);
	if (t04n0 == 2) msg("OK");
	dbg("=== FINE ===");

	test_num = 5;
	dbg(">>>INIZIO<<<: destinatario occupato o non esistente");
	t05s0 = sem_ini(0);
	new_proc(05, 0);
	new_proc(05, 1);
	sem_wait(end_test);
	sem_wait(end_test);
	if (t05n0 == 2) msg("OK");
	dbg("=== FINE ===");

	test_num = 6;
	dbg(">>>INIZIO<<<: accesso su più pagine");
	t06s0 = sem_ini(0);
	new_proc(06, 0);
	new_proc(06, 1);
	sem_wait(end_test);
	sem_wait(end_test);
	if (t06n0 == 2) msg("OK");
	dbg("=== FINE ===");

	delay(10);
	test_num = 7;
	// controlliamo che tutta la memoria sia stata correttamente rilasciata
	natl memafter = getmeminfo().num_frame_liberi;
	if (memafter != membefore)
		err("memoria non liberata: %d frame", membefore - memafter);

	pause();
}
